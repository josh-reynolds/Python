# Trading procedure (Traveller 77 Book 2 pp. 42-4)
#
# Once per week, throw d66 to determine best cargo
#   DMs per world population
# Determine quantity
# Purchase if desired, up to limits of quantity
#   and available cargo space
# Partial purchases incur 1% fee
# Determine price of goods by 2d6 roll on table
#   DMs per skills, brokers, world characteristics
#
# Can sell cargo on a (different?) world
# Sale price by 2d6 roll on table
#   DMs per skills, brokers, world characteristics

# So overall sequence would be:
# Enter trade depot and see available goods
# Choice: wait a week, purchase some or all, jump to new system
# (And at any point can sell cargo in the hold)

# Other elements we will need:
#   time/calendar (so we will want to display current time...)
#   world characteristics
#   cargo tables
#   bank account (also need to display/query this...)
#   brokers for hire
#   character skills
#
# Not covered in this section, but eventually will want
# starship economics (Book 2 pp. 5-8)
# Operating expenses:
#   fuel
#   life support
#   routine maintenance
#   crew salaries
#   berthing costs
#   bank payment
#
# The starship economics section also covers freight
# shipping (flat rate - above is speculation) - add
# this option eventually. Also passengers.

# Ship design and customization is another potential
# area to explore. We'll assume a simple standard design
# (like the Free Trader) to start with.

# The star map will be a whole 'nother thing. A couple
# potential approaches:
#   Traveller subsector maps, whether generated or
#     loaded from a file
#   On-demand world generation - of course will need
#     to persist these systems as they are created

# UI thoughts:
#  as long as we're text-based, might want to play with
#  more ANSI code formatting to distinguish various things
#
#  also think about persistent display sections, rather than
#  always having to query data points
#
#  will need to make all the input much more robust - it needs
#  to handle bogus input appropriately

# -------------------------------------------------------------
# Comments about individual cargo unit_size assessment, prune
# through this and retain if any is useful...
# ---------------------------------------------------
# This data might belong in the cargo tables rather than here
# also, the RAW is very handwavy about tonnage for individual items,
# basically says "figure it out" - only some of these items
# are in the equipment list, so I'll fill in something plausible
# as best I can
# 
# Equipment list comparisons drawn from Book 3 (pp.16-7)
#
# Also need to consider that tonnage should be _displacement tons_
# not mass, so fiddle with the numbers supplied as necessary
# and there's packing material to consider too, as they call out in
# the example on Book 2 p. 43
#
# Per Traders & Gunboats p. 5, a 1.5m deck plan square, floor to
# ceiling, is half a displacement ton - so a 100-ton ship has
# 200 grid squares in theory. Yes, cargo hold ceilings might be
# higher than 3m, but this is a good enough basis for converting
# length/width into displacement numbers.
#
# Of course if we're dipping into sources later than the original
# three LBB, then we should be able to look all this up directly.
#
# Another observation - Traveller 77 trading setup does not consider
# Tech Level at all. Some of the items below might not be 
# producible on a given (low-tech) world. Can hand-wave by 
# assuming they are off-world products being warehoused here...
# 
# We'll assume the aircraft are less dense than the ground vehicles
# and fiddle with mass to volume ratios accordingly
#
# assume TL5 Fixed Wing Aircraft based on price
# weight 5 tons, cargo 5 tons, length 15m, wingspan 15m

# assume TL8 Air/Raft based on price
# weight 4 tons, cargo 4 tons
# the Scout/Courier deck plans in Traderes & Gunboats
# allocates 12 grid squares to its Air/Raft, so 6 d-tons

# not listed - base this on ship's computers
# closest fit is the Model/2bis, which costs a bit more
# (12MCr vs 10), and displaces 2 tons

# assume TL6 All Terrain Vehicle based on price
# weight 10 tons

# assume TL6 Armored Fighting Vehicle based on price
# weight 10 tons

# not listed, will need to guesstimate
# let's just assign it the same stats as ATV/AFV
# -------------------------------------------------------------

# -------------------------------------------------------------
# I'd like to ease the remaining coupling, don't like passing objects
# in to all the ctors, everything has access to everything. It's better
# than the previous global resource abuse, but could be better.
#
# The model I arrived at in Ship.refuel() may provide the way. It 
# handles its own data, then passes back the cost to the caller, which
# then passes it along to Financials. If we allow multi-dimensional
# costs (money, time, fuel, space), then the component classes could
# be properly ignorant of one another. Only the master Game class
# (which holds references to everything already) would know. This is
# something like a service bus - a blob of data flowing down a pipe,
# with individual components choosing whether to take action or not.
#
# Calendar (ImperialDate)
# ImperialDate
# Cargo (Credits)
# CargoDepot (Cargo, ImperialDate, Credits, Financials, Ship, StarSystem)
# Financials (Credits, ImperialDate, Ship, StarSystem)
# Credits
# Ship (Credits)
# StarSystem (Ship, Financials, CargoDepot)
#
# Should distinguish importing a class vs. calling methods or
# accessing fields on an existing object. The former is OK, the
# latter is coupling.
#
# The data classes (ImperialDate, Credits, Cargo) are fine, and
# right now Ship and StarSystem (with a minor exception) are in
# the same category. StarSystem owns CargoDepot - otherwise it
# is not coupled at all, so moving the latter up seems like a 
# good move.
#
# Almost all the logic outside of the master Game class is in
# CargoDepot, Financials, and Calendar. Those are the focus.
#
# So, after some initial shuffling, we now have:
#
# [OK] ImperialDate
# [OK] Calendar (ImperialDate)
# [OK] Cargo
# [  ] CargoDepot (Cargo, ImperialDate, Credits, Financials, Ship, StarSystem)
# [OK] Credits
# [  ] Financials (Credits, ImperialDate, Ship, StarSystem)
# [OK] Ship (Credits)
# [OK] StarSystem
# -------------------------------------------------------------

# -------------------------------------------------------------
# Another question is how to handle per-trip fuel costs.
# One model is to assess a cost for travel out to the
# jump point, and again for inbound. That does leave open
# the possibility of the ship being stranded.
# Alternative would be to assess the full trip cost on 
# landing.
# In both cases, there's the question of the player gaming
# the system and either evading costs or getting stuck.
# -------------------------------------------------------------

# -------------------------------------------------------------
# We'll use the standard Imperial calendar, though that didn't
# yet exist in Traveller '77
# year is 365 consecutively numbered days
# date displayed as DDD-YYYY
# seven day weeks and four week months are used to refer to
# lengths of time, but rarely to establish dates
# (of course fun math, 7 * 4 * 12 = 336, so we are missing
# 29 days - but since week/month are really just durations
# it shouldn't matter)

# right now we only have refreshing the cargo depot weekly as an
# event, but there will be more:
#    * monthly loan payment
#    * annual maintenance
#    * monthly crew salaries
#    * daily berthing fees for extended stays
# other operational costs might better be handled as resource modeling:
#    * fuel
#    * life support

# also need to advance the calendar while in-system
# RAW says that ships typically take two trips per month:
# each jump is one week, and they spend a week buying & selling
# cargo, finding passengers, and on shore leave

# two approaches:
#    * give each action a cost in days
#    * advance the calendar only on jump and liftoff (the latter
#        perhaps with a message like 'you spent a week on Yorbund')

# for the former, does it add up to about a week? and do we want the
# player to be fiddling with time as well as money and space?
#    * to/from jump point - 1 day each
#    * to/from orbit - no time, don't want to privilege highport
#    * buy cargo (and load into ship) - 1 day
#    * sell cargo (and load into ship) - 1 day
#    * find passengers (and embark) - 1 day
#    * find freight (and load into ship) - 1 day
#    * listing hold/depot contents - no time
#    * refuelling - no time at port, 1 day to skim 
#    * recharging life support?
#    * financial transactions - no time
#
# easily 6-7 days if the player does all activities
# but if they want to go fast, jump in, skim fuel, jump out - just
# one day? or even no delay if they have reserve fuel.
# -------------------------------------------------------------

# --------------------------------------------------------------
# Consolidating TO_DO list:

#  * [DONE] Create a currency class to keep value vs. display straight
#  * [DONE] Deprecate and remove credit_string() function
#  * [DONE] Add (basic) math/comparison operators to currency class
#            (add more operators as needed)
#  * [DONE] Change purchase/sale DMs from lists to hashes to improve data
#            entry and validation
#  * [DONE] Regenerate cargo for sale weekly (and reset price adjustment)
#  * [DONE] Review Calendar increment scenarios, remove speculative options
#  * [    ] Review Calendar.year() setter for whether it should notify observers
#  * [    ] Longer intervals need to make sure repeating events execute multiple times
#  * [DONE] Add 'wait a week' command
#  * [DONE] Display current date
#  * [    ] Advance calendar for in-system activities
#  * [DONE] Add fuel system to Ship
#  * [    ] Add fuel expenditure
#  * [DONE] Add refuelling costs at starport
#  * [DONE] Restructure payment flow & dependencies for fuel
#  * [    ] Extend payment flow model to reduce coupling between classes
#  * [    ] Add starport classification to StarSystem
#  * [    ] Add unrefined fuel and its effects
#  * [DONE] Add fuel level check before executing jump
#  * [    ] Add select destination before jump (will tie in to subsector map,
#            world generation, possibly freight & passenger selection)
#  * [    ] Add misjumps and other ship malfunctions (ties to unrefined fuel & maintenance)
#  * [    ] Fix handling of observers after jump
#  * [    ] Skimming as jump point action, assuming gas giants present in 
#            StarSystem (abstract the outer system for this purpose)
#  * [    ] Add gas giant presence to StarSystem
#  * [DONE] Add view StarSystem data action
#  * [    ] Add life support system to Ship and corresponding mechanics like
#            recharging costs, check level before jump, etc.
#  * [DONE] Add extended berthing fee mechanism
#  * [    ] Add annual maintenance
#  * [DONE] Add monthly loan payment
#  * [DONE] Add monthly crew salaries
#  * [    ] Add crew members with skills
#  * [    ] Add proper salary calculation per crew member
#  * [DONE] Protect input from bad data - one example, non-numeric
#            values cause crashes
#  * [DONE] Extract confirmation input loop to a reusable function
#  * [    ] Make type dunder methods more robust with NotImpemented etc.
#  * [    ] Add 'plus days' method to ImperialDate
#  * [....] Make StarSystem.__eq__ more robust
#  * [DONE] Create an unload_cargo method to consolidate proper handling
#  * [DONE] Add crew skills and their influence on sale prices
#  * [DONE] Add brokers and their influence on sale prices
#  * [    ] Review interpretation that skills/brokers only apply to sales
#  * [DONE] Prevent immediate resale of bought cargo
#            (current solution just prevents sale to source world, may want
#             to add a time element - simplest would be to reset the source_world
#             field to None, but later for Merchant Prince we may want to retain it)
#  * [    ] Move cargo data to separate data file
#  * [DONE] Pass Credits in to Cargo ctor, not integer that needs conversion
#  * [    ] Add visualization of cargo purchase DMs (colorized trade codes?)
#           (should be able to view in hold and while trading,
#            possibly also while choosing a destination world)
#  * [    ] Add different ship types and ship design
#  * [    ] Add ship streamlining and effect upon landing/skimming
#  * [    ] Replace dummy/test data with 'real' values
#  * [    ] Add a transaction ledger to Financial class
#  * [    ] Add loan history and statement
#  * [    ] Add out-of-funds condition (game over?)
#  * [    ] Add freight shipping
#  * [    ] Add passengers
#  * [    ] Add multiple star systems and map (whether loaded or generated
#            and whether in advance or on the fly)
#  * [    ] Create a proper UWP class and generator in the StarSystem ctor
#  * [....] Adjust UI elements, play with more ANSI codes
#  * [    ] Save game state
#  * [    ] Load game state
#  * [    ] If we want to expand beyond just the trade model, add 
#            ship encounters (Book 2 p. 36), hijacking, piracy, etc.
#  * [    ] RPG lite elements: named crew, brokers, color events & encounters, etc.
#  * [    ] Distinguish between highport and downport
#  * [DONE] Separate code out into modules
#  * [....] Refactoring and tests!!!
#  * [    ] pylint/pydocstyle scrub
