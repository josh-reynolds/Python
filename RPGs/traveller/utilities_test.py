"""Contains tests for the utilities module."""
import unittest
from utilities import actual_value, die_roll, constrain, get_lines, dictionary_from

class UtilitiesTestCase(unittest.TestCase):
    """Tests utility functions."""

    def test_die_roll(self):
        """Test random six-sided die rolls."""
        total = 0
        for _ in range(1000):
            result = die_roll()
            self.assertGreaterEqual(result, 1)
            self.assertLessEqual(result, 6)
            total += result
        average = total/1000
        self.assertGreaterEqual(average, 3.3)
        self.assertLessEqual(average, 3.7)

    def test_rolling_multiple_dice(self):
        """Test rolling multiple six-sided dice."""
        total = 0
        for _ in range(1000):
            result = die_roll(2)
            self.assertGreaterEqual(result,2)
            self.assertLessEqual(result,12)
            total += result
        average = total/1000
        self.assertGreaterEqual(average, 5.5)
        self.assertLessEqual(average, 8.5)

    def test_constrain(self):
        """Test constraining a value within bounds."""
        self.assertEqual(constrain(5,1,10), 5)
        self.assertEqual(constrain(5,6,10), 6)
        self.assertEqual(constrain(5,1,4), 4)

    def test_actual_value(self):
        """Test the Traveller actual value table results."""
        self.assertEqual(actual_value(2), .4)
        self.assertEqual(actual_value(3), .5)
        self.assertEqual(actual_value(4), .7)
        self.assertEqual(actual_value(5), .8)
        self.assertEqual(actual_value(6), .9)
        self.assertEqual(actual_value(7), 1)
        self.assertEqual(actual_value(8), 1.1)
        self.assertEqual(actual_value(9), 1.2)
        self.assertEqual(actual_value(10), 1.3)
        self.assertEqual(actual_value(11), 1.5)
        self.assertEqual(actual_value(12), 1.7)
        self.assertEqual(actual_value(13), 2)
        self.assertEqual(actual_value(14), 3)
        self.assertEqual(actual_value(15), 4)

        # actual_value() will throw an exception if
        # input is < 2 or > 15 (generated by 2d6 + mods)
        self.assertRaises(KeyError, actual_value, 1)
        self.assertRaises(KeyError, actual_value, 16)

    def test_get_lines(self):
        """Test retrieving all lines from a text file."""
        lines = get_lines("./cargo.txt")
        self.assertEqual(len(lines), 36)
        self.assertEqual(lines[0][:12],
                         "11, Textiles")

    def test_dictionary_from(self):
        """Test string-to-dictionary conversion."""
        string = "{foo:1,bar:2,baz:3}"
        dictionary = dictionary_from(string)
        self.assertTrue(isinstance(dictionary, dict))
        self.assertEqual(len(dictionary), 3)
        self.assertEqual(dictionary['foo'], 1)
        self.assertEqual(dictionary['bar'], 2)
        self.assertEqual(dictionary['baz'], 3)

    # remaining functions are almost purely side-effect,
    # not terribly useful to have unit tests

# -------------------------------------------------------------------
if __name__ == '__main__':
    unittest.main()
