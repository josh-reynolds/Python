 Converting Pygame Zero projects to 'raw' Pygame

 I'm working on NixOS, and there isn't a package available for Pygame Zero (and PIP
 doesn't play nice either), so I thought I'd try to backfill the missing pieces. Worst 
 case I should be able to pull pgz from GitHub, but giving this a go first. (Not 
 attempting to duplicate all of pgz - just enough to get the sample games working.)

 Overall it looks very similar to Processing. The client programmer writes a script
 with update() and draw() functions, and runs with pgz - that handles the game loop
 and event handling.

 I have coded up the first project from 'Code the Classics Vol. 1' and added a little
 game loop at the end. Goal is to hook these together - right now it runs without 
 errors, but only shows a blank window. I'll also need to download and/or create
 art and sound assets to get this working.

 Once the first project is converted, I should have a roadmap for doing the rest.

 Reviewing pgz docs for requirements:

 * pgz expects images in an 'images' subfolder (and AFAIK also assumes png format)
 * Actor class holds sprites, and has pos and height fields, and a draw() method
 * Additional fields: topright, left, right
 * pgz automatically calls script draw() and update() once per frame
 * pgz automatically calls event handlers if defined - on_mouse_down()
 * Actor class method: collidepoint()
 * pgz defines constants for mouse buttons and keys: mouse.LEFT
 * pgz expects audio files in a 'sounds' subfolder (format expected is wav?)
 * built in sounds module plays sound files by name (autoloads and creates wrapper objs?)
 * built in Clock can schedule func calls for later
 * Built in objects:
     * Screen - wraps pygame screen
     * Rect - directly from pygame
     * images / sounds - loads files on demand from images/sounds dirs
         * filenames lowercase/numbers/underscores only, start w/ letter
	 * .png/.gif/.jpg formats for images
	 * name passed to Actor is image file name (w/o extension)
	 * .wav/.ogg formats for audio
     * music - plays longer audio clips from music dir
         * plays one at a time
     * Clock - schedule function calls for later
     * Actor - holds moving images
         * constructed with an image name
	 * some fields: x, image, right, pos, etc.
	 * some methods: draw(),
	 * same fields/methods as Rect
	 * anchor field - by default center but can be moved
	 * angle field - rotate the image around anchor - also changes width & height
	 * distance_to() and angle_to() methods
    * keyboard - attributes matching every key, with True/False values
    * animate() built in function, returns an Animation instance
    * tone - generates tones w/ built-in synthesizer
 * event hooks:
    * draw()
    * update()
    * on_mouse_*()
    * on_key_*()
	 
--------------------------------------------------------------
step by step - Pawng!
* basic pygame.init and setting up display
* basic pygame game loop, and pgzrun.go() removed
* only event handlers for quitting game (window control and 'q')
* adding update() to game loop
* [comment out for now] adding draw() to game loop
* ISSUE: keyboard not defined
* create a simple keyboard class - need to add a couple boolean fields (space, down)
* loop is running, but can't yet respond to key events
* adding interaction between game loop and keyboard, and mechanism to reset between keypresses
* loop runs and can advance out of the menu state - still blank white screen
* next step - uncommenting draw() call - fails on screen.blit syntax
    pygame blit expects a surface, pgz wrapper screen can take an image name and autoload it
    need to create an image once that wrapper is running
* created a wrapper Screen class and started filling interface
* next error - 'Bat' object has no attribute 'draw' - need to fill in Actor, stub for now
* next error - missing another image, will fill these in as needed... just dummies for now
* OK, screen is drawing with some dummy images on white background, need to probe to see what's next...
    will switch from State.MENU to State.PLAY, but no visible activity
* in update for State.MENU, we now need to play sounds - will need another wrapper class
    created a very simple Sounds class that loads in audio files and exposes for playback, it works
* filling in Actor.draw() stub with very simple graphic to see what's happening next
    also having actors load their image in ctor
* tracing through calls now - three tricks:
    * add pygame.time.Clock().tick(1) to game loop to slow things waaaay down
    * add print statements at start of primary function/method calls 
    * add __repr__() to Actor classes
* D'oh, dumb typo stalling me out - no parentheses on call to obj.update !!
* OK, that got the basics working - ball moves, bats respond to key commands
* next error - fail to create an Impact when ball reaches bat - ah, missing parens again
    (I typed in the project code from the book, didn't download - apparently I added some typos)
* now hitting a bunch of missing errors, filling in with dummies...
* the AI is now successfully playing on the menu screen, until the ball goes out of bounds
* next error - 'Ball' object has not attribute 'pos' - Impact() when ball goes off top/bottom of screen
    adding the fix to Ball.update() - seems like pgz Actor was probably handling, but current
    code isn't calling super.update() either, so...
* [observation for later] - Game.play_sound() doesn't seem to get called, needs investigation...
* tried taking out Clock debugging line, and it runs super fast - pgz probably slows things to 60 fps,
    so going to leave that in
* suppressed a lot of debugging spew, and can see that Game.play_sound() is being called, but 
    because of try/catch it is silently doing nothing - just as well, haven't stubbed in sound files yet
* similar issue with the music built-in, haven't created it yet
* all the digit images are a drag, only hit the error after the score has gone up enough - I think it's 
    time to download the project assets so we can get past that and winkle out remaining bugs
* OK, cloned the original off to the side, and copied over image files (with attribution) - game works
    mostly correct, but sizing of everything is off - first guess is my Actor implementation is lacking
    will probably need to check out the pgz sources, but tackling audio and music assets first
* One tweak required to the script - downloaded audio assets are ogg format, and I had hardcoded for 
    wav files. However, now that I've made the change, not getting any sounds at all...
* Ah! My hacked up Sounds class doesn't have any accessors for the other sounds, need to add.
* Also caught a typo in my window size - too short, that's why everything was truncated. Fixed.
* Almost there - remaining issues:
    [OK] Music is not playing (have not implemented a Music class)
    [OK] Bat hit boxes not aligned with graphic (my half-assed Actor class probably to blame)
    [OK] Player 2 bat not appearing at all (is it offscreen?)
    [OK] I think the ball is supposed to bounce of top/bottom edges, doesn't seem to be happening...
* Once that's all done, would be good to separate this out into a re-usable module to make the rest
    of the ports easier
* Music working - now to deal with Actor
* Theory - Actor draws based on the center-point of the image, but I am using a simple blit command from
    the top-left. Everything seems to be offset to the right and down, so this would add up.
* OK, that corrected the issues with bat and ball location, but now the table and menu graphics are 
    in the wrong location. And bounce still isn't working, handle that separately.
* Simple fix is to change their pos in the blit() call to (HALF_WIDTH, HALF_HEIGHT) instead of (0,0).
    Possibly pgz is using Actor anchor here, not sure. Leaving this hack for now, can investigate later.
* Just realized I can handle this all in my bespoke Actor & Screen classes with an option 'center'
    parameter to the blit() call. Only the call from Actor sets to True - the other non-actor images
    use the default False value and everything looks correct now.
* I think just the top/bottom edge issue is left now. Lot of magic numbers in the collision routine,
    let's decipher.
    * Table size is 800 x 480
    * Half values are 400 and 240
    * Ball image is 24x24, though the graphic itself is only 14x14 or so (alpha edges)
    * Bat image is 160x160 - graphic itself is about 25x118 (alpha edges and shadow)
    * Bats are positioned at 40 and 760
    * Collision detection first checks if the ball has crossed the center line of either bat, 
        calculated as 344 from the field midpoint (HALF_WIDTH)
	* Bat 760 - HALF 400 = 360 - Ball/bat half width 16 = 344
	* abs(Bat 40 - HALF 400) = 360 - Ball/bat half width 16 = 344
    * Then it checks if the potential collision point lies between the ends of the bat
        * -64 < (ball.y - bat.y) < 64     (so estimating bat as ~ 128 px high)
    * All that appears to be working fine
    * Finally, it checks if the ball has passed the top or bottom edges
        * abs(ball - HALF_HEIGHT) > 220    (gives a 20 px border top and bottom)
    * While it is entering this block and seems to be setting the y & dy values correctly, the
        ball continues to travel offscreen until it crosses the left/right edges and scores a point.
	It does not bounce.
    * Careful comparison with text, no obvious errors.
    * Tried playing a game and observing carefully, and it _might_ be bouncing near the ends of the
        table, but not in the middle. Ah! Is this if statement indented one level too far?
    * That's it! (Tricky seeing the indentation in a book listing FWIW.)

* OK, this has reached a good point. Next steps:
    * Review against project code, ideally the only changes are removing pgz import and pgzrun
    * Extract my bespoke pgz to a separate module and get this running with minimal changes to script
    * Longer term, my classes are nowhere close to as robust as the real thing - add as we go, the
       later projects will no doubt force me to adapt.

* Adding a property to Actor allows me to remove the one edit I made to the original sources (setting
    Ball.pos during update()). I don't use Python properties very often, good to add to the bag of tricks.

* Moved all my custom classes to an engine module, mostly smooth process. Just the game loop left to
    move, which might be trickier.

* Also don't like my Sounds implementation. Currently very tied to this project via hard-coded audio file
    names. Will want to dynamically load the contents of the directory instead.

* And another small wrinkle - Actor was unhappy in the new module because 'screen' was not defined. But
    adding that needs SIZE from the client script. So I put in a temporary definition, and everything
    works, but on startup, the window is in the bottom-right quadrant of the screen. Needs investigation.
    And fixed!

* Almost there. The main script matches the book text except for expected changes:
    * Stripped out pgz imports, version check and pgzrun.go() call
    * Added import of my engine module, and game loop at end of script (will try to move latter out)
    * Game loop also requires pygame.locals import, hopefully moves out as well

* Remaining work:
    * [WON'T FIX] Although I renamed the project, the menu screen art asset still says 'Boing!'
    * [FIXED]     Window caption is not being set correctly with the move to the engine module
    * [FIXED]     Still want to fix the coupling of the Sounds class
    * [WON'T FIX] No key repeat, so the player moves very slowly - game is slightly challenging
    * [FIXED]     Game loop and imports still in main script - move to engine

* Moving the game loop. Slightly tricky - it needs to reference update() and draw(), which are
    defined in the main script. 
    * If we define dummy functions in engine module, they mask the real ones, and we get a blank 
      screen with just music running.
    * If we import main (or just those two functions), we get a circular dependency error.
    * Probably need to study pgz sources to see how they pull this off.
    * OK, their solution does a lot of things and is very involved. Study later, but do something
      simpler for now.
    * Experimented with visibility into importing script from engine module via sys.modules
      dictionary, but the update/draw functions were not visible there. Also tried inspect
      module. Just realized, though, that maybe the __main__ module hadn't been loaded yet - 
      my print statements are happening when the engine module is imported at the top... need
      to circle back.
    * In the meantime, I can pass in the functions to my run() loop and deal that way. The main
      goal is preserved - minimal change to original script, just import line and run. Not entirely
      happy with this function's signature, but it will do for now.

* Cleaned up the Sounds class - now auto-populates attributes from contents of sounds dir. And also
      supports wav files.

I think this one is done. I should be able to drop this engine module into any of the future projects,
and have it work with minimal effort, and no significant change to the project script. I'll keep
evolving and smoothing the thing as we go, of course, and adding functionality as required.

