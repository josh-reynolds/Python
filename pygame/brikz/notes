Starting on Code the Classics Vol. 2. The first project is an Arkanoid clone they call
'Kinetix.' I'm calling mine 'Brikz.'

This will be based on v1.0 of my Pygame Zero clone engine, any changes required contributing
to v1.1. I'll follow the same methodology as the previous projects:

1) Starting from the bare minimum project (just stubs for draw() and update()), work bottom-up
   filling in one stub at a time.
2) Add new stubs and placeholder assets as necessary to keep it running without errors before 
   checkin. Add them in the same location relative to other definitions as in the book text.
3) Once done, again choose the stub furthest down the script and repeat.
4) One exception - when filling in a class stub, do the ctor first, then resume bottom-up.
5) Also apply fixes or extensions to the engine as necessary for compatibility as this progresses.

-----------
Going smoothly as with previous projects. A few clarifications to the procedure above:

1) If a class name is not apparent while filling in code, create a generic throwaway Mock class, to 
   be removed once all references to it have been properly coded to the real class.

2) If the original code eats exceptions (with an except: pass clause), temporarily replace with
   a print statement to permit debugging and stubbing.

3) Similarly, execute various code paths at one's discretion, by generating events via key presses
   for instance, or setting boolean flags to True. Python won't complain about lines that won't
   get executed, and the more coverage, the quicker the stubs will flesh out.

4) At some point creating placeholder assets will become tedious. You can drop in the official assets
   at any time.
   
-----------
First pass is complete (other than filling in all the level data - that's tedious, so I just have the 
first level in place for now). The AI has been playing the game on the menu screen for a while now, and
that has uncovered lots of stubs and placeholders, which were subsequently filled in.

I haven't pushed through to the other game states yet - that will be next. Then book scrub, GitHub scrub,
official resources, and playtest/debugging.

OK, so it turns out that stop_music() was the only missing code invoked by moving to State.PLAY. And it
required a small extension to the engine interface, so that's good. Very tedious getting to State.GAME_OVER
'naturally' via playtest, as there are a _ton_ of missing barrel placeholders even now. And I'm ignoring 
the sound engine errors regarding missing sound files (they don't crash the game out). So maybe it's
time to bring in the official resources.

-----------
Resources in place, which allows smoother playtesting. Doing a little of that before book scrub - it's
uncovering more missing stubs to go after. Plays pretty well so far, but seeing a few minor issues:

* [FIXED] Barrel shadows aren't moving along with them
* [FIXED] Music isn't playing (easy fix, haven't added that block yet...)
* [BY DESIGN] Ball is not centered on Bat at start (not certain this is an issue)
* [WON'T FIX] Ball can get trapped moving horizontally (usually at Bat level, but can be anywhere via multiball)

Found the barrel shadow issue - simple typo, had shadow_pos instead of shadow.pos. Fixed.

All stubs are filled in, so now it's time for the book scrub.

* [FIXED] engine implementation of Actor.image doesn't allow += string operation in Bat.update()

My implementation of the Actor.image property returned a Surface on get, but accepted a String on set. That
has worked so far, but simple fix for this one. Minor internal changes needed. Question is whether this
creates a compat risk, but we'll figure that out later.

-----------
Book scrub is complete, except the level data. Need to fill that in, scrub against GitHub, and fix the issues
listed above. I've aleady done a lot of playtesting during development and it looks good overall.

-----------
Starting on the GitHub scrub. Interesting to note that they have more 'sensible' layout choices than in the 
book. Makes sense, really. They assign constants one per line, while the book does lots of tuple expansion.
And they lay out the level data clearly, rather than running it all together as in the book. I'm not going
to totally reformat as part of the scrub - really just tackling errors and omissions - but where it makes
sense I will.

Level data is done. That's probably the largest piece I haven't gotten to yet.

-----------
Finished scrubbing against GitHub sources. Caught a handful of typos. And looks like one in their code as
well - on line 1154, they have 'state = state.TITLE' but the second state should be capitalized.

Just need to review open issues an do a little more playtesting, and this one is complete.

Both issues are still present. The ball position one might be due to my Actor implementation, and how
I'm calculating anchors. Not 100% certain it matches pgz. The second one is less clear. They have code
to catch whether a ball is infinitely bouncing between two indestructible bricks, and to prevent
horizontal vectors after multiball - and my code matches. But this is still happening regularly. One
stretch - they import Pygame.math.Vector2, while I am using Pygame.Vector2. Would be surprising if this 
matters, but maybe? (Of course, could play their version and see if the bug is present there too...)

-----------
OK, investigated the two remaining issues. The first is by design, nothing to do with my Anchor 
implementation. They have a constant, BALL_INITIAL_OFFSET, that governs placement of the ball on the
bat. Default value is 10. Set this to zero and the ball is centered. Not sure why they want this, but
it's working as planned.

As for the second one, I shifted to pygame.math.Vector2 and no difference (as noted above, would be
alarming if this actually did anything). I can't fix without deviating from the text, so I'm going to
leave it be for now. If I come back to this project, or borrow for anything similar in the future, 
should address. Possibly give the ball a tiny nudge if it is traveling in a perfectly flat vector.
