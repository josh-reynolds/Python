Tackling the second project in Code the Classics Vol. 1: Cavern, a Bubble Bobble clone.

I implemented a working Pygame Zero-like engine module that is compatible with these projects
for the first project (Pawng!/Boing!). Very likely will need extension or fixes as we implement
this one.

First step is to get the framework in place:
    * engine.py present
    * game script, named main.py (engine expects this name)
    * sounds/music/images dirs

Goal is to exactly duplicate the book text, only removing the pgz import, version check and run
lines, and adding in references to my own engine module:
    * import classes at the top
    * import just the run function at the bottom and call it

I have a very minimal version set up - it runs, just showing a blank white screen. Now to get the
game working.

I see two ways to approach this:
    * type it up from top to bottom
    * start with the hooks invoked by the engine (update & draw), and fill in stubs as necessary
        to keep it running without errors

The first seems pretty boring, won't see any results until the whole thing is typed up, and then
will have to debug it as a whole. I think I'll give the second approach a go.

Going smoothly so far. We start at the bottom with update() and draw(), and have been stubbing up
from there. I created some placeholder images, too. When it came time to wire up music, though, it
seemed easier to just bring in the real thing. So right now it sits on the menu screen with music
playing and no interactivity.

But now I am filling in the stub for space_pressed(), and I think they have a bug in the printed
code. As written, this logic always returns true, regardless of whether the key is pressed or not.
I verified my engine code is not sending out spurious key press events. So now, it is immediately
moving to a blank screen in State.PLAY (good part is it forces me to add a few more stubs, but 
still...).

Fixed. Trivial, really - they had the wrong indentation on the else clause. Not me this time. And
this is why some people really hate Python...

This has been working well so far, very rapid progress and the game is in a running state at all
time (though nothing interesting is happening yet, really). I've needed to make a few small changes
to the engine, as expected, and it occurs to me that I ought to start versioning this thing.

I implemented a very simple __version__ attribute for the module, and added back the pgz version
checks, pointing to the engine instead. (Small bug in their code here too - they use a multi-line
f-string for the version error message, but leave off the 'f' on the second line, so it doesn't 
interpolate the variable value.) Also, due to my slightly wonky import trickery, I need to 
grab the module object.

One small can of worms this opens up: ideally versions should be backward-compatible. At least the
simple 'less than' check used right now implies so. And that means I ought to test older projects
with the latest engine version. We'll see.

I may want to set up a separate directory for just the engine, so I can keep it all in one place. And
conceptually, I think I'll use minor versions per project (0.1, 0.2, etc.) and push the major version
at the end of the book - two volumes so far, so I'd expect to have a 1.0 and 2.0 release. Not sure
if the pace of changes will slow down after the first few projects.

Done with the first phase. It runs (strangely) with placeholder graphics - very difficult to tell what
is going on, but other than the missing sound file exception (expected) there are no errors. The approach
until now was:

1) Starting from a minimal script that runs the engine, add placeholders & stubs to eliminate errors
   thrown when running the game.
2) Moving from the bottom to the top, fill in stubs with real code
3) Go to 1

That means only code that gets called has a stub, and there potentially are gaps. In this project,
everything but the Orb class needed to be added. I suspect that's due to a bug in my engine (below).

So, from this point, next steps are:

  * Drop in the real images & audio so we can see what's going on
  * Debug and fix
  * Scrub against book code for typos and omissions (already aware of Orb class)

Suspected bugs in the engine code:
  
  * [FIXED] Not handling anchors properly, so things are drawing in weird locations (I think)
  * [FIXED] Not handling key repeats, so bubble blowing isn't happening, and as with the previous game,
     movement is very slow and awkward.

OK, I undid my fix to the space_pressed() function on a whim - still think that is a bug - and it
   now tries to spawn an Orb, so I am driven to add the stub by my own rules. Might as well...

I spun off a separate engine project to make it easier to work on, and fixed both the key repeat issue
and implemented anchors for Actor. Also undid the undo of the space_pressed() fix. Still getting strange
behavior, and I can't tell if my fixes are good in this context - only thing I know for sure is the 
interface hasn't changed (and I _can_ see key repeats firing via the sounds error message - jump/up
spams the console with 'can't find jump.ogg' messages).

I think bringing in the real assets is next. And then either scrub against the text, or debug issue
by issue. Mixing it up probably to keep it interesting.

-------------------------------------------------------------------
Turns out my anchor solution above was badly flawed. It worked OK as long as the Actor's image didn't
change, then it was garbling the various coordinates stored in the internal Rect. I worked on it over in
the engine project and believe it is now correct. Along the way I've also brought over the official
images and sounds.

The game plays now, though still a bit strangely. Issues:

* [FIXED] platform blocks don't seem to match the layout in the source file
* [FIXED] platform graphics and hit boxes don't seem to be aligned
* [FIXED] bubble blowing isn't happening at all
* [     ] player sprite flickers terribly when moving left/right

On the plus side, a lot of it _is_ working:

* title screen with attract mode
* music and sound effects playing
* robots spawning, moving and shooting apparently correctly
* fruit spawning and scoring when picked up
* player health/lives decrementing when hit by blasts
* end of game when out of lives/health, with end screen
* advance to next game level

I double-checked space_pressed() against the book, and I didn't introduce a typo. And if I undo my fix,
the game registers a continuous keypress, so it goes immediately into the game and bubbles spawn repeatedly.
So I checked out the source from GitHub, and yeah, the book version has a nasty omission - a whole else
clause as well as bad indentation on the one they preserved. Fixed up my script, and bubble blowing now
works as expected.

- - - - 
I scrubbed my code against the book text, and caught a couple very small typos. Otherwise it matches
AFAIK, other than the previously mentioned bug fix in space_pressed(). (Also they use 'type' as a 
parameter name in a couple methods, but I don't like using a language keyword like that, so altered
slightly.)

Played again to test, and the previously mentioned issues are all there, but it _is_ a playable game.
The block placement issue is the big one. A couple other issues I noticed this time through:

* [FIXED] health & life power-ups don't disappear when picked up, and can be grabbed multiple times
* [     ] code implies that the bubbles are pushed along if the key is held down, until the limit is
            reached, but I'm not getting that behaviour. Instead a series of bubbles are produced, and
	    they all immediately start floating.

Going to see about debugging the open issues myself. If I can't see what's going on, I'll compare against
the code from GitHub again.

- - - - 
Found the issue with the platform blocks - indentation error again, one I introduced. Block layout is 
now correct and aligned with hit boxes.

...and same for health/life pickups not disappearing. (In fairness this one was split across pages, so
very hard to see the indent alignment.) 

I think all the remaining issues come down to how we're handling repeat key presses. Fix that, and this 
one is done.

Yep. Changing the key_repeat() call to a lower value cleared up both issues. Researching online, I saw
repeated recommendations for (50,50), but dropping this down to (10,10) is what I needed here. Calling 
this project done.
