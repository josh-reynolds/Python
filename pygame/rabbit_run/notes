Getting started on project 3 from Code the Classics Vol. 1. It's a Frogger clone named 'Infinite
Bunner.' I'm calling my version 'Run Rabbit Run.'

This will include any necessary changes to my Pygame Zero clone engine for version 0.3.

We're ready to go: v0.2 of the engine in place, version incremented, and the bare minimum scaffolding
set up. Project runs to a blank white screen.

- - - -
Going smoothly so far. I'm being even stricter about following the method this time through - starting
with the first two stubs (update & draw), only fill in new stubs as needed to get it to run. On the last
project I filled in things from the bottom up regardless.

I've had to add a couple minor things to the engine: making Keyboard subscriptable, and implementing a
basic Screen.draw_text(). The latter will need fleshing out; we'll get to that later. I also renamed
Screen.display to Screen.surface for compatibility - it was only being used internally in the class to
this point, so it was a trivial change.

Right now we have a white screen with a couple placeholder images for the menu, and a perpetually
scrolling background (from enabling the DEBUG settings).

There are blocks of code that haven't been triggered yet, so the interpreter hasn't had a chance
to complain (and force the corresponding stub work). The basic keyboard support is there, so once 
I finish the current skeleton, a key press will push it into State.PLAY and stubbing will start all
over.

- - - -
First pass is complete. The game 'runs' on the menu screen with a continuously scrolling background - 
only placeholder images right now, so it doesn't look like much. And no sounds playing yet.

Second pass is to hit space and push into State.PLAY, then deal with that round of stubbery. Third pass
will be to walk the text and fill in anything I missed to that point. Besides the issues mentioned above,
there are some code blocks that only trigger rarely via RNG, so just luck whether I hit them before
pass three.

So far the engine has required very minimal changes, noted above.

- - - -
Second pass is done. Still some big gaps missing from the text, and the game itself isn't much more
interesting. I'll be passing through the text now and adding what's missing. Then real resources,
debugging and hopefully done.

Pretty bad bug in the text - the update() method for the Eagle class is outdented so it looks like
the module's method - but that is present much later on in the script. Fixing in my version, will
likely check against GitHub later.

- - - -
Finished the third pass - all text from the book is in place, though it may well need a review to catch
any typos. The game is sort of playable now, though with placeholders it's difficult to know what's going
on.

Next to bring in all official assets. Then playtesting and debugging.

- - - -
All official resources are in place with proper attribution. On initial playtesting, I see the following
issues:

* [FIXED] Rabbit sprite is invisible
* [FIXED] Rabbit does not seem to collide with hedges
* [FIXED] Theme music is not playing
* [FIXED] Debugging display is still enabled
* [     ] keys dictionary is in the game script, not engine
* [     ] engine implements draw_text, not draw.text

More to come, probably, but until that first one is fixed this is very tricky to playtest. A couple other
things I'll be trying:

* Double-checking against the book text
* Comparing with the github version

So the music one was easy - just needed an import reference. I wasn't seeing the error because this is
wrapped in try/catch. On to the next...

The invisible rabbit issue looks like another indentation error in the book. The block at the end of
Rabbit.update() that sets the image to anything other than 'blank' was indented too far and never
executing. Double-checked, I did not introduce this - the text is clearly wrong.

...and figured out the hedge collision issue. I missed an entire line in the Rabbit.handle_input(), so it
was not checking the Grass.allow_movement() method. Fixed.

At this point, all known gameplay issues are fixed. There are some engineering fit and finish tasks, and 
I'd still like to scrub against the published sources one more time. Almost done.
