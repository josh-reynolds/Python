1/11/25

TO_DO:

Overworld mode
[OK] impassable terrain
[OK] opaque terrain and LOS
[OK] better handling of border cells
[OK] larger map
[OK] map data to separate file
[  ] incorporate terrain data into world file?
[OK] basic terrain graphics
[OK] better terrain graphics
[  ] terrain animation
[  ] sprite/tile sheet
[OK] basic player image
[..] player sprite & animation
[OK] monster spawning
[  ] aquatic monsters
[  ] multiple monster types
[..] monster sprites & animation
[OK] monster movement
[OK] monster collisions w/ monsters/player/terrain
[..] world clock (automatic 'pass' action)
[  ] monster persistence & despawning
[..] monster attacks
[  ] sound effects
[  ] music
[  ] world actions: move, attack, spell, enter, ?
[OK] status display
[OK] move counter
[  ] food and starvation
[OK] action feedback & console
[OK] observer or subscriber model for events & actions
[..] refactor class hierarchy
[..] scrub magic numbers and fix
[OK] ...especially terrain index values
[..] mark 'private' methods
[OK] move terrain image loading out of Grid.draw()
[  ] scrub dead code from app model, not using here
[  ] improve test coverage
[  ] scrub import statements
[  ] player death

Combat mode
[  ] mode switching
[  ] combat maps
[  ] turn order
[  ] monster AI
[  ] character statistics
[  ] combat actions: move, spell, attack, ?
[  ] items & loot

Menus
[  ] character creation
[  ] save/load game state

Town mode
[  ] town map files
[  ] NPCs & dialogue
[  ] vendors & shops
[  ] town tileset
[  ] town actions: buy, sell, ?

Dungeon mode
[  ] wire-frame FPS
[  ] dungeon maps
[  ] level switching

Design
[  ] RPG mechanics & progression
[  ] story / goals
[  ] separate code & data
[  ] separate model & view components a la MVC
[  ] file layout
[  ] world map / procedural?
[  ] town maps
[  ] dungeon maps
[  ] dialogue content

Optional
[  ] interactive tiles (switches, buttons, doors, etc.)
[  ] books & readable items
[  ] hazardous tiles
[  ] status effects
[  ] mini-map and mapped/visited vs. visible
[  ] boats & vehicles/mounts
[  ] mouse control
[  ] attract mode
[  ] mouse control
[  ] controller control
[  ] moon phases / day-night cycle
[  ] moon gates
[  ] flying monsters

Notes:
Just checked out Ultima III Exodus for a refresher; it has been many years. Might want to start with an even
simpler base - like Akallabeth or Ultima I - for an initial target, though the later games (and competing
series that came along after) provide an interesting roadmap for features. Some things are easier to do now,
and our expectations have changed in the forty-some years since the originals. But to keep this manageable,
stick with a very limited initial feature set.

... tried out Akallabeth and Ultima I. The former is much more primitive than I remember, at least graphically 
(just abstract lines - I can see them on an Apple II greenscreen in my mind). The latter, though, is more
advanced than I recall. A huge step up. All of the core features above are present, except for the combat
mode. There's only one character involved, so combat occurs on the world map. But towns, wireframe dungeons, 
and so on are all there. This might be a good feature set to target. Take it in stages - get the overworld
working first.

Assumptions:
* grid is square
    * Ultima I has a rectangular grid along the top two thirds of the screen
    * need to decide on screen layout to settle this question
* grid dimensions are an odd number, so player can be centered
    * IIRC Ultima IV was 11x11, Ultima III was 13x13
* player remains at center - grid moves instead
    * this approach may be coupling Grid too much as we add more entities
    * may want to have Player move, and Grid automatically recenter - same effect, but possibly 
      cleaner dependencies
* world data format is space-delimited integers, probably low range, but not necessarily single-digit
    * after putting together a couple world files manually, numbers are tedious to look at
    * may want some tooling to help generate maps
