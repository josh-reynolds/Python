1/11/25

TO_DO:

Overworld mode
[OK] impassable terrain
[OK] opaque terrain and LOS
[OK] better handling of border cells
[OK] larger map
[OK] map data to separate file
[  ] incorporate terrain data into world file?
[OK] basic terrain graphics
[OK] better terrain graphics
[..] terrain animation
[  ] sprite/tile sheet
[OK] basic player image
[OK] player sprite & animation
[OK] monster spawning
[  ] aquatic monsters
[  ] multiple monster types
[OK] monster sprites & animation
[OK] monster movement
[OK] monster collisions w/ monsters/player/terrain
[..] world clock (automatic 'pass' action)
[  ] monster persistence & despawning
[OK] monster attacks
[OK] attack animations
[  ] sound effects
[  ] ranged attacks
[  ] music
[OK] world actions: move
[OK] world actions: attack
[OK] world actions: pass

Commands from Ultima 1:
    [OK] Attack
    [na] Board (ship, horse, vehicle)      - later
    [  ] Cast (spell)
    [  ] Drop (item)
    [na] Enter (town, castle, dungeon)     - later
    [  ] Fire
    [  ] Get (item)
    [na] Hyperjump                         - out of scope?
    [  ] Inform
    [na] Klimb (ladders up/down)           - later (dungeon mode)
    [  ] Noise (toggle sound)
    [na] Open (coffins)                    - later (dungeon mode)
    [  ] Quit & Save
    [  ] Ready (weapon, armor, spell)
    [na] Steal                             - later (town mode)
    [na] Transact                          - later (town mode)
    [na] Unlock                            - later (town mode)
    [na] View                              - out of scope?
    [na] Xit (ship, horse, vehicle)        - later
    [  ] Ztats
    [OK] SPACE (Pass)
    [OK] ARROW KEYS (Move)

[OK] status display
[OK] move counter
[  ] food and starvation
[OK] action feedback & console
[OK] observer or subscriber model for events & actions
[..] refactor class hierarchy
[..] scrub magic numbers and fix
[OK] ...especially terrain index values
[..] mark 'private' methods
[OK] move terrain image loading out of Grid.draw()
[OK] scrub dead code from app model, not using here
[  ] improve test coverage
[  ] scrub import statements
[..] player death
[OK] monster death
[OK] player experience
[  ] loot & chests
[  ] status effects from terrain
[OK] non-prompt text to console
[  ] line-wrap in console

Combat mode
[  ] mode switching
[  ] combat maps
[  ] turn order
[  ] monster AI
[  ] character statistics
[  ] combat actions: move, spell, attack, ?
[  ] items & loot

Menus
[  ] character creation
[  ] save/load game state

Town mode
[  ] town map files
[  ] NPCs & dialogue
[  ] vendors & shops
[  ] town tileset
[  ] town actions: buy, sell, ?

Dungeon mode
[  ] wire-frame FPS
[  ] dungeon maps
[  ] level switching

Design
[  ] RPG mechanics & progression
[  ] story / goals
[  ] separate code & data
[  ] separate model & view components a la MVC
[  ] file layout
[  ] world map / procedural? / infinite?
[  ] town maps
[  ] dungeon maps
[  ] dialogue content

Optional
[  ] interactive tiles (switches, buttons, doors, etc.)
[  ] books & readable items
[  ] hazardous tiles
[  ] status effects
[  ] mini-map and mapped/visited vs. visible
[  ] boats & vehicles/mounts
[  ] mouse control
[  ] attract mode
[  ] mouse control
[  ] controller control
[  ] moon phases / day-night cycle
[  ] moon gates
[  ] flying monsters
[  ] wind direction
[  ] whirlpools/waterspouts
[  ] monster morale
[  ] party / multiple characters
[  ] textured 1P dungeons / raycast dungeons

Notes:
Just checked out Ultima III Exodus for a refresher; it has been many years. Might want to start with an even
simpler base - like Akallabeth or Ultima I - for an initial target, though the later games (and competing
series that came along after) provide an interesting roadmap for features. Some things are easier to do now,
and our expectations have changed in the forty-some years since the originals. But to keep this manageable,
stick with a very limited initial feature set.

... tried out Akallabeth and Ultima I. The former is much more primitive than I remember, at least graphically 
(just abstract lines - I can see them on an Apple II greenscreen in my mind). The latter, though, is more
advanced than I recall. A huge step up. All of the core features above are present, except for the combat
mode. There's only one character involved, so combat occurs on the world map. But towns, wireframe dungeons, 
and so on are all there. This might be a good feature set to target. Take it in stages - get the overworld
working first.

Assumptions:
* grid is square
    * Ultima I has a rectangular grid along the top two thirds of the screen
    * need to decide on screen layout to settle this question
* grid dimensions are an odd number, so player can be centered
    * IIRC Ultima IV was 11x11, Ultima III was 13x13
* player remains at center - grid moves instead
    * this approach may be coupling Grid too much as we add more entities
    * may want to have Player move, and Grid automatically recenter - same effect, but possibly 
      cleaner dependencies
* world data format is space-delimited integers, probably low range, but not necessarily single-digit
    * after putting together a couple world files manually, numbers are tedious to look at
    * may want some tooling to help generate maps

1/29/25
Folding in some scratch notes....

-------------------------------------------------------------------------------------
Grid.contents[y][x]                     - array indices, 0-based
Grid[(x,y)]                             - array indices, 0-based
    World.get_cell(index + offset)      - lookup via World.contents[x][y]
        World.contents[y][x]            - array indices, 0-based    

Grid.draw()
    Grid.grid_to_screen(x,y)            - currently uses above indices
    Grid.index_to_screen(x,y)           - renaming previous to clarify

Grid.move(dx,dy)                        - invoked by key events, +/- 1 four-way directions
                                          adjusts Grid.offset value

Grid.offset                             - currently maps top-left cell to world location
Grid.center                             - 'offset' from top-left to center cell of grid
                                          currently fixed at half grid width + height

Execution -------------------------------------------------------------------

g = grid(w,h,...)
    Grid(w,h,...)                       - sets fields and populates contents array of w * h dimensions
                                        - sets Grid.offset to (0,0)
                                        - sets Grid.center to (w//2, h//2)
        world()                         
	    World()                     - creates an empty World
g.world.open_file("foo")                - populates World.contents with file data

LOOP
    on KEYDOWN
        g.move(dx,dy)                   - adjusts g.offset
	    g.can_move(dx,dy)           - checks terrain value at center + dx,dy
	        bounds check
		offset = new_coord

    g.draw()
        loop through contents           - retrieve cells and index coordinates
	    index_to_screen(ix,iy)      - calculates screen Rect from index values
	    g[ix,iy][0]                 - gets color value from terrains tuple
	        world.get_cell(i + off)
		    w.contents[x][y]    - retrieves key value into terrains hash
		    terrains[key]       - gets terrain tuple
	index_to_screen(center)         - calculate player Rect

-------------------------------------------------------------------------------------

line from 3,2 to origin

y = 2x/3

y = 1 ... x = 3/2


+---+---+---+---+---+---+---+---+---+---+---X
|   |   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+-X-+---+
|   |   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---X---+---+---+
|   |   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+-X-+---+---+---+---+
|   |   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---O---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |   |
+---+---+---+-X-+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |   |
+---+---X---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |   |
+-X-+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+---+---+

-------------------------------------------------------------------
0,0     1,0     2,0     3,0     4,0


0,1                             4,1


0,2             2,2             4,2


0,3                             4,3


0,4     1,4     2,4     3,4     4,4


case 0,0: dx=-2, dy=-2   direction=(1,1)      BALANCE
case 4,0: dx=2, dy=-2    direction=(-1,1)     BALANCE
case 0,4: dx=-2, dy=2    direction=(1,-1)     BALANCE
case 4,4: dx=2, dy=2     direction=(-1,-1)    BALANCE

case 2,0: dx=0, dy=-2    direction=(0,1)      Y DOM
case 0,2: dx=-2, dy=0    direction=(1,0)      X DOM
case 4,2: dx=2, dy=0     direction=(-1,0)     X DOM
case 2,4: dx=0, dy=2     direction=(0,-1)     Y DOM

case 1,0: dx=-1, dy=-2   direction=(0,1)      Y DOM
case 3,0: dx=1, dy=-2    direction=(0,1)      Y DOM
case 0,1: dx=-2, dy=-1   direction=(1,0)      X DOM
case 0,3: dx=-2, dy=1    direction=(1,0)      X DOM
case 4,1: dx=2, dy=-1    direction=(-1,0)     X DOM
case 4,3: dx=2, dy=1     direction=(-1,0)     X DOM
case 1,4: dx=-1, dy=2    direction=(0,-1)     Y DOM
case 3,4: dx=1, dy=2     direction=(0,-1)     Y DOM


-------------------------------------------------------------------
Demo().run()
    Demo.__init__()
        Game.__init__()
	    pygame.init()
	    <set instance and class fields>
	Level.__init__()
	    Game.levels.append(self)
	    <set instance and class fields>
	    <load background image>
	    Level.enter()
	        pygame.display.set_caption()
	Grid.__init__()
	    <set instance and class fields>
	    world.world()
	        World.__init__()
	            <set instance and class fields>
	    Grid.find_edges()
	    player.player()
	        Player.__init__()
	            <set instance and class fields>
	    World.open_file()
	        <load world data>
	    Game.level.nodes.append(self)
	Text.__init__() # twice
	    <set instance and class fields>
	    Game.level.nodes.append(self)
	    Text.set_font()
	    Text.render()
	StatusDisplay.__init__()
	    <set instance and class fields>
	    Game.level.nodes.append(self)
	    StatusDisplay.set_font()
	    StatusDisplay.render()
	        <retrieve status data>
	Console.__init__()
	    <set instance and class fields>
	    Game.level.nodes.append(self)
	    Console.set_font()
	    Console.add()
	    Console.render()
    Demo.run()
        <handle events>
	    Game.do_shortcut()
	    Game.level.do_event()
	        Game.level.do_shortcut()
	    Game.level.check_move()
	        Game.level.spawn()
		    monster()
		        Monster.__init__()
	                    <set instance and class fields>
		Monster.think() for monster in monsters
		    Monster.move()
	Game.level.update()
	    .update() for node in nodes
		<pass or animate>
	    monster.update() for monster in monsters
	        <animate>
	Game.level.draw()
	    .draw() for node in nodes
		node.render()
		<draw to screen>
	    monster.draw() for monster in monsters
		<draw to screen>

Two loops running through the game:
    - game loop running at frame rate
        - governs animations
    - action loop
        - only advances when player takes action
	- updates corresponding status displays
	- prompts other actors to act

Keep these clear, and if necessary clarify through class interfaces

For GUI elements, three categories:
    - static, rendered once (Text)
    - state information, updated and rendered on action (StatusDisplay)
    - animated, updated and rendered on draw (Console)

Three coordinate systems in play:
    - screen coordinates
    - grid coordinates
    - world coordinates
Grid currently has responsibility for keeping the latter two straight

--------------------------------------------------------------------------
Current class structure in nulltima:

Demo(Game) -------------------------
  __init__()
Game -------------------------------
  level    (class)    -> Level
  levels   (class)    -> Level
  screen   (class)
  moves    (class)
  running  (class)
  flags
  rect
  shortcuts

  __init__()
  run()
  do_shortcut()
  get_moves()
Text ------------------------------- NODE
  text
  pos             (screen coordinate)
  fontname
  fontsize
  fontcolor
  font
  img
  rect

  __init__()
  set_font()
  render()
  update()
  draw()
StatusDisplay ---------------------- NODE
  pos               (screen coordinate)
  fontname
  fontsize
  fontcolor
  font
  width
  img
  rect

  __init__()
  set_font()
  render()
  update()
  draw()
Console ---------------------------- NODE
  pos              (screen coordinate)
  fontname
  fontsize
  fontcolor
  bg
  lines
  maxlines
  prompt
  prompt_pos
  prompt_color
  time
  font
  width
  img
  rect

  __init__()
  set_font()
  render()
  add()
  update()
  draw()
Level -------------------------------
  options (class)
  id
  nodes        -> (nodes)
  bg
  file
  caption
  moved
  last_move
  console      -> Console
  monsters     -> Monster
  shortcuts
  rect
  grid         -> Grid

  __init__()
  update()
  draw()
  enter()
  do_event()
  do_shortcut()
  check_move()
  spawn()
  __str__()
Grid -------------------------------
  width
  height
  left
  top
  cell_width
  cell_height
  contents
  world      --> World
  offset
  center
  edges
  player     --> Player
  file
  
  __init__()
  __getitem__()
  update()
  find_edges()
  spawnable()
  draw()
  is_occluded()
  bresenham()
  not_endpoint()
  from_world()
  to_world()
  on_grid()
  can_view()
  to_screen()
  move()
  can_move()
  is_vacant()
  no_action()
Monster -------------------------------
  images (class)
  pos         (world coordinate)
  level      -> Level (back reference)
  time
  current_image

  __init__()
  update()
  draw()
  think()
  move()
  can_move()
  __repr__()
Player -------------------------------
  images (class)
  pos         (screen coordinate)
  time
  current_image

  __init__()
  update()
  draw()
  move()
World -------------------------------
  contents
  
  __init__()
  get_cell()
  open_file()
  width()
  height()
Terrain ------------------------- 'struct'
  index
  name
  passable?
  opaque?
  image

Opportunities:
 -OK- introduce Node base class and move duplicate code up
 -..- make Grid conform to Node hierarchy
 -OK- take player responsibilities away from Grid
 -  - additional decomposition of Grid 'god class'
 -OK- introduce Actor base class and move duplicate code up
 -..- see if we can eliminate the upward coupling to Game class
 -  - class for grid cells?
 -OK- class for terrain handling?   flyweights?

 [DONE] remove redundant ctor functions
 [DONE] create Actor base class and parent Monster/Player to it
 [DONE] recenter Grid after Player move
 [DONE] make Player responsible for movement & coordinates
 [DONE] change Player to use world coordinates
 [DONE] move Player ownership out of Grid to Level
 [DONE] create Component (formerly Node) base class and parent GUI elements to it
 [DONE] move duplicate GUI code up to Component

next up, creating Node hierarchy

(inherited that nomenclature from tutorial model... changing over to 'Component' from
here out, seems more accurate to me)

We now have two basic kinds of elements:
  - Components - GUI pieces, live in screen space
  - Actors - game pieces, live in world space

There are also a few different containers:
  - World - manages information about world space
  - Level - manages GUI and action loop

And at the base level:
  - Game - manages game loop driving animations

---------------------------------------
recentering the grid:

at start under original model:
  Grid.offset = (0,0)
  Grid.to_world((0,0)) == (0,0)
  Grid.width = 11
  Grid.height = 11
  Grid.center = (5,5) == (Grid.width//2, Grid.height//2)
  Grid.to_world((5,5)) == (5,5)
  Player.pos = Grid.to_world((5,5))

so... offset == Player.pos - Grid.center

---------------------------------------
Observer model for actions. Currently five classes react to player action, and this
interplay is the core of the second game loop.

  - StatusDisplay - retrieves move count from Game and render() 
  - Grid - needs to recenter() if player has moved, needs Player.pos data
  - Console - add() action name to its list and prunes to fit
  - Monster - think()
  - Level - action handler, also spawn() Monsters

Currently these are handled via logic in Level.check_move() and blackboard variables in 
Game. If we unify the method call names and have the consumers register with Level instead,
it could clean this up.

 -DONE- unify the method names
 -DONE- standardize the arguments, if necessary create an event object
          StatusDisplay needs current move count and player position post-action
          Grid needs player position post-action
	  Console needs action name
	  Monster doesn't need any data
	  Level doesn't need any data
 -DONE- add a list to subject (Level) and method to subscribe to notifications

All done, and this cleaned up the extra method (check_moves) and coupling up to Game.

---------------------------------------
All the above is working OK - next challenge is interaction between monsters and the
player, starting with the attack action. Wiring this up for the monsters is simple enough
(though I haven't sorted out death conditions yet). But player attacks pose a challenge - 
in the original games, attack (and some other commands) is a two-step process: first press
'a' to start the attack action, then an arrow key for direction. My current loop immediately
executes the action on keypress, with no opening to prompt for a second key.

Smaller issue: the original console displays all sorts of information, not just the last
player action, and it is coming from multiple sources. At the moment I'm thinking about 
'monster attacks... Hit!' sort of thing.

I put together a working attack action, which embeds a second key capture loop inside itself.
This actually works, with one small hitch: the game animations pause while waiting for player
input. Not ideal. Also, I have a feeling this won't scale nicely to later, more complex commands.

Both of these issues can probably be handled with the same solution: an Event/Message Queue.
Going to try that for the console first, since it should be the simpler application. Once these
are both working, I think monster death and spawing a loot chest is next.

---------------------------------------
Message queue for the console is running - mostly OK, though there's a weird quirk with how
messages are ordered that I haven't figured out yet. Doesn't seem to matter if I read the queue
forwards or backwards. The ordering in the monster attack routine does the trick, and there it's
seemingly backwards, but works. Needs a deeper look.

But first, thinking through queue for key commands. This one is trickier. I think two main goals
for the design:

- first, allow for multiple key combinations, don't just fire off an Action on keypress
- second, don't block the animation thread

The animation thread is the main game loop - do_event(), update(), draw(). It runs continuously at
maximum 'frame rate' speed.

As noted above, there's a second conceptual loop here - it ticks forward every time a key is pressed.

So first question, is that informal loop enough, or do we need to keep a little loop spinning 
independently of the main loop, that periodically polls our action queue?

Rather not have a second (potentially zombie) loop, so will try to get the former model working first.

Sequencing is:
  - player presses a key
  - main loop dispatches it to another (non-blocking how?) method and continues spinning
  - other method either:
    - immediately invokes an action if it's single-key variety, then returns
    - posts a prompt to console and saves state (previous keystroke) otherwise, then returns

So the queue is only used in the latter scenario. I think I was initially envisioning a long stream
of keystrokes, and a parser moving along taking small bites. But the consumer (pokes from the main loop)
is probably going to move _much_ faster than the producer (human keystrokes), so we'll never accumulate
much of a queue.

Don't want to insert a bunch of special case logic - seems like we could note the action type and 
cue off that (action metadata in self.shortcuts?). Let's give it a go.

Inserting this into Level for now. Long term, I don't think I like having this live there, or having
it split up with Game, so it may all get consolidated into another place.

---------------------------------------
Queues are working, more or less. Slightly kludgy, will want some cleanup refactoring, but functionally 
everything looks correct.

Next challenge: monster death. On the surface seems simple - when hit points go to zero, remove the
entity from the monster list in Level. But changing a list that might have an iterator traversing it can 
lead to all sorts of bugs. Second concern is making sure there are no references and the thing gets
garbage collected. Pretty sure the reference in Level.monsters is the only one, but should review.

I'll try the dead simple version first just to see what happens. Ah! Monsters are also observers, need
to deal with that reference too.

OK, simple version appears to work. Need to poke at it some more to be sure there are no bugs lurking.

But already this now resembles a game. How many monsters can you whack before you succumb? This would be 
a good milestone to reach. Need a 'score' - xp in the Player. And a death condition.

Another observation - should add some delays between updates in the action queue. Right now everything 
happens immediately after keypress. Would be more aesthetically pleasing to see them happen 
sequentially on-screen.

---------------------------------------
Cleaning up cruft left over from the tutorial framework - it's good stuff, but the functionality isn't
being used right now and is getting in the way. Making note of the features here, so if I change my 
mind I can retrieve it without needing to re-invent.

  - **options args on Text (for passing in bold, italic, etc. May well want this later.)
  - file field on EndScreen - used for background image
  - same on Level, as well as the code that draws the background image
  - key mods in do_shortcut (Level, Game) - just using single keys, and the mod occasionally 
    messes me up (accidentially have NumLock on, and game stops responding)
  - resizeable window in Game - not handling, should make this fixed

---------------------------------------
Thinking about 'polish' features now for a 'v0.1' type release. Very basic overworld-only, attack 
and move actions only, etc. But all the core there. Started with an end screen to display on player
death, and will add a title screen. Need some additional animations for attacks at least, and sound 
effects.

For the animation, I am considering a separate 'Effect' class. The issue is z-ordering. Currently, 
the draw loop in Overworld draws components, then monsters, then the player. If we attach the 
effect animation to any of those layers (except the latter) then they will sit underneath (unless 
we somehow break the animation loop sequencing, which seems like a bad idea). So, what if we add
a layer above player for effects? These would be short animations that play, then delete themselves. 
The attack animation from the original games visually works like this. We could also attach the 
sound effects to this object.

(Side note - in some of the original games, there is also a screen inversion for some activities, 
usuallly magic. Could also fit in here, but need to research engine capabilities - instead of an 
animation we draw on the screen, this would be a processing of the composited screen image as a 
whole.)

---------------------------------------
Basic effect class in place, with a simple attack animation. Looking very much like an Actor, so
need to consider the interfaces and class hierarchies here.

As a diversion, have started on animated terrains. Basic idea is that the terrain data list can 
contain either a single image file name, or a list. Depending on the data, we'll create a Terrain
or an AnimatedTerrain class. Issue, though, is in drawing.

For similar entities (i.e. Actors), the class owns its animation loop timer and draw method. Terrains 
as currently implemented are just a dumb data class (and Flyweight to boot). Draw method actually lives 
in Grid - need to ponder.

Thinking out loud... so, in a 'normal' class we want every instance to be independent, so in the case 
of animations they are all doing their own thing. But for terrains, we actually want them to be syncronized,
so running this through a single flyweight instance could be just what we want. Only issue off the top of 
my head is we don't yet invoke update() on terrains to advance the animation counter...
